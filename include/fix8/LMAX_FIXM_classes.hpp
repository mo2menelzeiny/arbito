//-------------------------------------------------------------------------------------------------
// *** f8c generated file: DO NOT EDIT! Created: 2018-05-22 03:44:16 ***
//-------------------------------------------------------------------------------------------------
/*

Fix8 is released under the GNU LESSER GENERAL PUBLIC LICENSE Version 3.

Fix8 Open Source FIX Engine.
Copyright (C) 2010-18 David L. Dight <fix@fix8.org>

Fix8 is free software: you can  redistribute it and / or modify  it under the  terms of the
GNU Lesser General  Public License as  published  by the Free  Software Foundation,  either
version 3 of the License, or (at your option) any later version.

Fix8 is distributed in the hope  that it will be useful, but WITHOUT ANY WARRANTY;  without
even the  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

You should  have received a copy of the GNU Lesser General Public  License along with Fix8.
If not, see <http://www.gnu.org/licenses/>.

*******************************************************************************************
*                Special note for Fix8 compiler generated source code                     *
*                                                                                         *
* Binary works  that are the results of compilation of code that is generated by the Fix8 *
* compiler  can be released  without releasing your  source code as  long as your  binary *
* links dynamically  against an  unmodified version of the Fix8 library.  You are however *
* required to leave the copyright text in the generated code.                             *
*                                                                                         *
*******************************************************************************************

BECAUSE THE PROGRAM IS  LICENSED FREE OF  CHARGE, THERE IS NO  WARRANTY FOR THE PROGRAM, TO
THE EXTENT  PERMITTED  BY  APPLICABLE  LAW.  EXCEPT WHEN  OTHERWISE  STATED IN  WRITING THE
COPYRIGHT HOLDERS AND/OR OTHER PARTIES  PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY
KIND,  EITHER EXPRESSED   OR   IMPLIED,  INCLUDING,  BUT   NOT  LIMITED   TO,  THE  IMPLIED
WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE,
YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

IN NO EVENT UNLESS REQUIRED  BY APPLICABLE LAW  OR AGREED TO IN  WRITING WILL ANY COPYRIGHT
HOLDER, OR  ANY OTHER PARTY  WHO MAY MODIFY  AND/OR REDISTRIBUTE  THE PROGRAM AS  PERMITTED
ABOVE,  BE  LIABLE  TO  YOU  FOR  DAMAGES,  INCLUDING  ANY  GENERAL, SPECIAL, INCIDENTAL OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH
HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

*/

//-------------------------------------------------------------------------------------------------
#include <fix8/f8config.h>

#if defined FIX8_MAGIC_NUM && FIX8_MAGIC_NUM > 16793600L
#error LMAX_FIXM_classes.hpp version 1.4.0 is out of date. Please regenerate with f8c.
#endif
//-------------------------------------------------------------------------------------------------
// LMAX_FIXM_classes.hpp
//-------------------------------------------------------------------------------------------------
#ifndef FIX8_4C4D41585F4649584D5F636C61737365732E687070_
#define FIX8_4C4D41585F4649584D5F636C61737365732E687070_

#if defined(_MSC_VER) && defined(F8_LMAX_FIXM_API_SHARED)
#if defined(BUILD_F8_LMAX_FIXM_API)
#define F8_LMAX_FIXM_API __declspec(dllexport)
#else
#define F8_LMAX_FIXM_API __declspec(dllimport)
#endif
#else
#define F8_LMAX_FIXM_API
#endif
namespace FIX8 {

    extern "C"
    {
    F8_LMAX_FIXM_API const F8MetaCntx &LMAX_FIXM_ctx();
    }

    namespace LMAX_FIXM {

//-------------------------------------------------------------------------------------------------
        using LMAX_FIXM_BaseMsgEntry = MsgTable;
/// Compiler generated metadata object, accessed through this function.
        F8_LMAX_FIXM_API const F8MetaCntx &ctx();

        class LMAX_FIXM_Router;

//-------------------------------------------------------------------------------------------------
/// Heartbeat (0), admin, 1 field, 0 groups.
        class Heartbeat : public Message {
            static F8_LMAX_FIXM_API const FieldTrait _traits[];
            static F8_LMAX_FIXM_API const FieldTrait_Hash_Array _ftha;
            static F8_LMAX_FIXM_API const MsgType _msgtype;
            static F8_LMAX_FIXM_API const unsigned _fieldcnt = 1;

        public:
            explicit Heartbeat(bool deepctor = true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}

            ~Heartbeat() = default;

            bool process(Router &rt) const { return (static_cast<LMAX_FIXM_Router &>(rt))(this); }

            bool is_admin() const { return true; }

            static const MsgType &get_msgtype() { return _msgtype; }
        };

//-------------------------------------------------------------------------------------------------
/// TestRequest (1), admin, 1 field, 0 groups.
        class TestRequest : public Message {
            static F8_LMAX_FIXM_API const FieldTrait _traits[];
            static F8_LMAX_FIXM_API const FieldTrait_Hash_Array _ftha;
            static F8_LMAX_FIXM_API const MsgType _msgtype;
            static F8_LMAX_FIXM_API const unsigned _fieldcnt = 1;

        public:
            explicit TestRequest(bool deepctor = true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}

            ~TestRequest() = default;

            bool process(Router &rt) const { return (static_cast<LMAX_FIXM_Router &>(rt))(this); }

            bool is_admin() const { return true; }

            static const MsgType &get_msgtype() { return _msgtype; }
        };

//-------------------------------------------------------------------------------------------------
/// ResendRequest (2), admin, 2 fields, 0 groups.
        class ResendRequest : public Message {
            static F8_LMAX_FIXM_API const FieldTrait _traits[];
            static F8_LMAX_FIXM_API const FieldTrait_Hash_Array _ftha;
            static F8_LMAX_FIXM_API const MsgType _msgtype;
            static F8_LMAX_FIXM_API const unsigned _fieldcnt = 2;

        public:
            explicit ResendRequest(bool deepctor = true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}

            ~ResendRequest() = default;

            bool process(Router &rt) const { return (static_cast<LMAX_FIXM_Router &>(rt))(this); }

            bool is_admin() const { return true; }

            static const MsgType &get_msgtype() { return _msgtype; }
        };

//-------------------------------------------------------------------------------------------------
/// Reject (3), admin, 5 fields, 0 groups.
        class Reject : public Message {
            static F8_LMAX_FIXM_API const FieldTrait _traits[];
            static F8_LMAX_FIXM_API const FieldTrait_Hash_Array _ftha;
            static F8_LMAX_FIXM_API const MsgType _msgtype;
            static F8_LMAX_FIXM_API const unsigned _fieldcnt = 5;

        public:
            explicit Reject(bool deepctor = true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}

            ~Reject() = default;

            bool process(Router &rt) const { return (static_cast<LMAX_FIXM_Router &>(rt))(this); }

            bool is_admin() const { return true; }

            static const MsgType &get_msgtype() { return _msgtype; }
        };

//-------------------------------------------------------------------------------------------------
/// SequenceReset (4), admin, 2 fields, 0 groups.
        class SequenceReset : public Message {
            static F8_LMAX_FIXM_API const FieldTrait _traits[];
            static F8_LMAX_FIXM_API const FieldTrait_Hash_Array _ftha;
            static F8_LMAX_FIXM_API const MsgType _msgtype;
            static F8_LMAX_FIXM_API const unsigned _fieldcnt = 2;

        public:
            explicit SequenceReset(bool deepctor = true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}

            ~SequenceReset() = default;

            bool process(Router &rt) const { return (static_cast<LMAX_FIXM_Router &>(rt))(this); }

            bool is_admin() const { return true; }

            static const MsgType &get_msgtype() { return _msgtype; }
        };

//-------------------------------------------------------------------------------------------------
/// Logout (5), admin, 1 field, 0 groups.
        class Logout : public Message {
            static F8_LMAX_FIXM_API const FieldTrait _traits[];
            static F8_LMAX_FIXM_API const FieldTrait_Hash_Array _ftha;
            static F8_LMAX_FIXM_API const MsgType _msgtype;
            static F8_LMAX_FIXM_API const unsigned _fieldcnt = 1;

        public:
            explicit Logout(bool deepctor = true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}

            ~Logout() = default;

            bool process(Router &rt) const { return (static_cast<LMAX_FIXM_Router &>(rt))(this); }

            bool is_admin() const { return true; }

            static const MsgType &get_msgtype() { return _msgtype; }
        };

//-------------------------------------------------------------------------------------------------
/// Logon (A), admin, 6 fields, 0 groups.
        class Logon : public Message {
            static F8_LMAX_FIXM_API const FieldTrait _traits[];
            static F8_LMAX_FIXM_API const FieldTrait_Hash_Array _ftha;
            static F8_LMAX_FIXM_API const MsgType _msgtype;
            static F8_LMAX_FIXM_API const unsigned _fieldcnt = 6;

        public:
            explicit Logon(bool deepctor = true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}

            ~Logon() = default;

            bool process(Router &rt) const { return (static_cast<LMAX_FIXM_Router &>(rt))(this); }

            bool is_admin() const { return true; }

            static const MsgType &get_msgtype() { return _msgtype; }
        };

//-------------------------------------------------------------------------------------------------
/// MarketDataRequest (V), application, 6 fields, 2 groups.
        class MarketDataRequest : public Message {
            static F8_LMAX_FIXM_API const FieldTrait _traits[];
            static F8_LMAX_FIXM_API const FieldTrait_Hash_Array _ftha;
            static F8_LMAX_FIXM_API const MsgType _msgtype;
            static F8_LMAX_FIXM_API const unsigned _fieldcnt = 6;

        public:
            explicit MarketDataRequest(bool deepctor = true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {
                if (deepctor)
                    _groups.insert({
                                           {146, new NoRelatedSym},
                                           {267, new NoMDEntryTypes},
                                   });
            }

            ~MarketDataRequest() = default;

            bool process(Router &rt) const { return (static_cast<LMAX_FIXM_Router &>(rt))(this); }

            static const MsgType &get_msgtype() { return _msgtype; }

            GroupBase *create_nested_group(unsigned short fnum) const {
                switch (fnum) {
                    case 146:
                        return new NoRelatedSym;
                    case 267:
                        return new NoMDEntryTypes;
                    default:
                        return nullptr;
                }
            }

            /// NoRelatedSym (146), application, 2 fields, 0 groups, is unique, hash: 0x2301e4c3
            // MarketDataRequest::NoRelatedSym
            class NoRelatedSym : public GroupBase // depth: 1
            {
                static F8_LMAX_FIXM_API const FieldTrait _traits[];
                static F8_LMAX_FIXM_API const FieldTrait_Hash_Array _ftha;
                static F8_LMAX_FIXM_API const MsgType _msgtype;
                static const unsigned _fieldcnt = 2;

            public:
                enum {
                    _fnum = 146
                };

                NoRelatedSym() : GroupBase(_fnum) {}

                ~NoRelatedSym() = default;

                MessageBase *create_group(bool) const {
                    return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha);
                }

                static const MsgType &get_msgtype() { return _msgtype; }
            };

            /// NoMDEntryTypes (267), application, 1 field, 0 groups, is unique, hash: 0x8000190c
            // MarketDataRequest::NoMDEntryTypes
            class NoMDEntryTypes : public GroupBase // depth: 1
            {
                static F8_LMAX_FIXM_API const FieldTrait _traits[];
                static F8_LMAX_FIXM_API const FieldTrait_Hash_Array _ftha;
                static F8_LMAX_FIXM_API const MsgType _msgtype;
                static const unsigned _fieldcnt = 1;

            public:
                enum {
                    _fnum = 267
                };

                NoMDEntryTypes() : GroupBase(_fnum) {}

                ~NoMDEntryTypes() = default;

                MessageBase *create_group(bool) const {
                    return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha);
                }

                static const MsgType &get_msgtype() { return _msgtype; }
            };
        };

//-------------------------------------------------------------------------------------------------
/// MarketDataSnapshotFullRefresh (W), application, 4 fields, 1 group.
        class MarketDataSnapshotFullRefresh : public Message {
            static F8_LMAX_FIXM_API const FieldTrait _traits[];
            static F8_LMAX_FIXM_API const FieldTrait_Hash_Array _ftha;
            static F8_LMAX_FIXM_API const MsgType _msgtype;
            static F8_LMAX_FIXM_API const unsigned _fieldcnt = 4;

        public:
            explicit MarketDataSnapshotFullRefresh(bool deepctor = true) : Message(ctx(), _msgtype(), _traits,
                                                                                   _fieldcnt, &_ftha) {
                if (deepctor)
                    _groups.insert({268, new NoMDEntries});
            }

            ~MarketDataSnapshotFullRefresh() = default;

            bool process(Router &rt) const { return (static_cast<LMAX_FIXM_Router &>(rt))(this); }

            static const MsgType &get_msgtype() { return _msgtype; }

            GroupBase *create_nested_group(unsigned short fnum) const {
                return fnum == 268 ? new NoMDEntries : nullptr;
            }

            /// NoMDEntries (268), application, 5 fields, 0 groups, is unique, hash: 0x926f6db8
            // MarketDataSnapshotFullRefresh::NoMDEntries
            class NoMDEntries : public GroupBase // depth: 1
            {
                static F8_LMAX_FIXM_API const FieldTrait _traits[];
                static F8_LMAX_FIXM_API const FieldTrait_Hash_Array _ftha;
                static F8_LMAX_FIXM_API const MsgType _msgtype;
                static const unsigned _fieldcnt = 5;

            public:
                enum {
                    _fnum = 268
                };

                NoMDEntries() : GroupBase(_fnum) {}

                ~NoMDEntries() = default;

                MessageBase *create_group(bool) const {
                    return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha);
                }

                static const MsgType &get_msgtype() { return _msgtype; }
            };
        };

//-------------------------------------------------------------------------------------------------
/// MarketDataRequestReject (Y), application, 3 fields, 0 groups.
        class MarketDataRequestReject : public Message {
            static F8_LMAX_FIXM_API const FieldTrait _traits[];
            static F8_LMAX_FIXM_API const FieldTrait_Hash_Array _ftha;
            static F8_LMAX_FIXM_API const MsgType _msgtype;
            static F8_LMAX_FIXM_API const unsigned _fieldcnt = 3;

        public:
            explicit MarketDataRequestReject(bool deepctor = true) : Message(ctx(), _msgtype(), _traits, _fieldcnt,
                                                                             &_ftha) {}

            ~MarketDataRequestReject() = default;

            bool process(Router &rt) const { return (static_cast<LMAX_FIXM_Router &>(rt))(this); }

            static const MsgType &get_msgtype() { return _msgtype; }
        };

//-------------------------------------------------------------------------------------------------
/// header (header), application, 10 fields, 0 groups.
        class header : public MessageBase {
            static F8_LMAX_FIXM_API const FieldTrait _traits[];
            static F8_LMAX_FIXM_API const FieldTrait_Hash_Array _ftha;
            static F8_LMAX_FIXM_API const MsgType _msgtype;
            static F8_LMAX_FIXM_API const unsigned _fieldcnt = 10;

            begin_string *_begin_string;
            body_length *_body_length;
            msg_type *_msg_type;

        public:
            explicit header(bool deepctor = true) : MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha),
                                                    _begin_string(new begin_string(ctx()._beginStr)),
                                                    _body_length(new body_length),
                                                    _msg_type(new msg_type) { add_preamble(); }

            ~header() = default;

            static const MsgType &get_msgtype() { return _msgtype; }

            begin_string *get_begin_string() { return _begin_string; };

            body_length *get_body_length() { return _body_length; };

            msg_type *get_msg_type() { return _msg_type; };

            void add_preamble() {
                add_field(Common_BeginString, 1, _begin_string, false);
                add_field(Common_BodyLength, 2, _body_length, false);
                add_field(Common_MsgType, 3, _msg_type, false);
            }
        };

//-------------------------------------------------------------------------------------------------
/// trailer (trailer), application, 1 field, 0 groups.
        class trailer : public MessageBase {
            static F8_LMAX_FIXM_API const FieldTrait _traits[];
            static F8_LMAX_FIXM_API const FieldTrait_Hash_Array _ftha;
            static F8_LMAX_FIXM_API const MsgType _msgtype;
            static F8_LMAX_FIXM_API const unsigned _fieldcnt = 1;

            check_sum *_check_sum;

        public:
            explicit trailer(bool deepctor = true) : MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha),
                                                     _check_sum(new check_sum) { add_preamble(); }

            ~trailer() = default;

            static const MsgType &get_msgtype() { return _msgtype; }

            check_sum *get_check_sum() { return _check_sum; };

            void add_preamble() {
                add_field(Common_CheckSum, 3, _check_sum, false);
            }
        };

//-------------------------------------------------------------------------------------------------

    } // namespace LMAX_FIXM
} // namespace FIX8
#endif // FIX8_4C4D41585F4649584D5F636C61737365732E687070_
